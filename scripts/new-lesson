#!/usr/bin/env node

// @ts-check

/**
 * @file
 * Use this script to generate a new lesson page and its slide deck.
 * Run with no args or with `--help` (or `-h`) flag to see usage message.
 * You can also @see {showHelpMessage} below.
 *
 * This file needs execute permission (e.g. by doing `chmod u+x <this file>`)
 * if you want to run it without the `node ` prefix.
 */

const fs = require("fs")
const path = require("path")

const title = process.argv[2]

if (!title || title === "-h" || title === "--help") {
  showHelpMessage()
  process.exit()
}

console.log("Generating lesson files...")

const LESSONS_DIR = "src/lessons/"
const DECKS_DIR = "src/decks/"

const existingLessonFiles = fs
  .readdirSync(LESSONS_DIR)
  // The pattern is two digits, a hyphen, some chars, and a ".md"
  .filter((filename) => /^\d{2}-.+\.md$/.test(filename))

const lessonNum = existingLessonFiles.length + 1
const slug =
  lessonNum.toString().padStart(2, "0") +
  "-" +
  title.toLowerCase().replace(" ", "-") +
  ".md"

// Create a lesson file
const lessonPath = path.join(LESSONS_DIR, slug)
fs.writeFileSync(lessonPath, lessonBoilerplate(title))
console.log(`Created '${lessonPath}'`)

// Create a deck file
const deckPath = path.join(DECKS_DIR, slug)
fs.writeFileSync(deckPath, deckBoilerplate(title))
console.log(`Created '${deckPath}'`)

console.log("Done!")

function lessonBoilerplate(title) {
  return `---
title: ${title}
excerpt: >
---

## Video

### Lesson session

TODO

### Revision session

TODO

## Exercise

TODO

## Extras

TODO
`
}

function deckBoilerplate(title) {
  return `---
title: ${title}
---

<section>

## TODO: slide 1

</section>


<section>

## TODO: slide 2

</section>
`
}

function showHelpMessage() {
  console.log(`Usage: new-lesson [-h|--help|title]

Create a new lesson page and its slide deck.

Example: new-lesson "Making decisions"
`)
}
